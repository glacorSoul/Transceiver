import{_ as r,c as i,a3 as o,o as t}from"./chunks/framework.CG6b9oel.js";const p=JSON.parse('{"title":"Discovery","description":"","frontmatter":{},"headers":[],"relativePath":"guide/discovery.md","filePath":"guide/discovery.md"}'),s={name:"guide/discovery.md"};function c(a,e,n,d,l,v){return t(),i("div",null,e[0]||(e[0]=[o('<h1 id="discovery" tabindex="-1">Discovery <a class="header-anchor" href="#discovery" aria-label="Permalink to &quot;Discovery&quot;">​</a></h1><p>Discovery in <code>Transceiver</code> can be divided in two categories. One type is <code>DI Discovery</code> other type is <code>Service Discovery</code>.</p><h2 id="transceiver-di-discovery" tabindex="-1">Transceiver DI Discovery <a class="header-anchor" href="#transceiver-di-discovery" aria-label="Permalink to &quot;Transceiver DI Discovery&quot;">​</a></h2><p>When you configure <code>Transceiver</code> it scans the provided dll with two main types: <code>ITransceiver&lt;TRequest, TResponse&gt;</code> and <code>IProcessor&lt;TRequest, TResponse&gt;</code>. In order for these types to be detected correctly you must have a Property, field or constructor with the <code>ITransceiver</code> type. Transceiver will automatically configure the protocol, logger, configuration, pipeline and other types per each detected transceiver. While it is possible to configure <code>Transceiver</code> with different protocols/integrations within the same assembly, it is strongly encouraged that such configuration is done within different assemblies.</p><p>Transceiver will also call the method <code>StartProcessingRequestsAsync</code> while providing the respective processor. This way the server will start handling your requests automatically!</p><h2 id="transceiver-service-discovery" tabindex="-1">Transceiver Service Discovery <a class="header-anchor" href="#transceiver-service-discovery" aria-label="Permalink to &quot;Transceiver Service Discovery&quot;">​</a></h2><p>Other type of discovery <code>Transceiver</code> has is <code>Service Discovery</code>. Service discovery is responsible for assigning an <code>Id</code> for request and response types. It will be created a local file named <code>TypeIdMap.json</code> that contains information about the types and their respective ids. In case of a server restart this file will be read again and the ids will be the same. This information is automatically sent from the server to the client when the client connects.</p>',7)]))}const y=r(s,[["render",c]]);export{p as __pageData,y as default};
